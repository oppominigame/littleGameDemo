{"version":3,"sources":["../../../../../assets/Script/network/assets/Script/network/Upload.ts"],"names":[],"mappings":";;;;AAAA;;;;;;GAMG;;AAEG,IAAA,kBAAqC,EAAnC,oBAAO,EAAE,sBAAQ,CAAkB;AAG3C;IAAoC,0BAAY;IADhD;QAAA,qEAwDC;QArDC,cAAQ,GAAa,IAAI,CAAA;QAGzB,eAAS,GAAY,IAAI,CAAA;QAGzB,mBAAa,GAAa,IAAI,CAAA;QAI9B,eAAS,GAAY,IAAI,CAAA;;IA2C3B,CAAC;IAzCC,sBAAK,GAAL;QAAA,iBAmCC;QAlCC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE;YAC/C,IAAI,IAAI,CAAA;YACR,IAAI,GAAG,GAAG,8CAA8C,CAAA;YACxD,IAAI,SAAS,GAAG,UAAC,IAAI;gBACnB,IAAI,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAA;gBACtC,IAAI,GAAG,EAAE,CAAC,UAAU,CAAC;oBACnB,GAAG,KAAA;oBACH,QAAQ,EAAE,YAAY;oBACtB,IAAI,EAAE,MAAM;oBACZ,OAAO,EAAE;wBACL,KAAI,CAAC,GAAG,CAAC,0BAAM,CAAC,CAAA;oBACpB,CAAC;oBACD,IAAI,EAAE,UAAC,GAAG;wBACR,KAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAA;oBAC/B,CAAC;iBACJ,CAAC,CAAC;gBACH,IAAI,CAAC,gBAAgB,CAAC,UAAC,GAAG;oBACtB,KAAI,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,MAAM,GAAI,GAAG,CAAC,UAAU,CAAC,GAAG,GAAG,CAAA;gBAC7E,CAAC,CAAC,CAAA;YACJ,CAAC,CAAA;YACD,IAAI,MAAM,GAAG,UAAC,IAAI;gBACd,KAAI,CAAC,GAAG,CAAC,wBAAsB,IAAM,CAAG,CAAC;YAC7C,CAAC,CAAA;YACD,EAAE,CAAC,WAAW,CAAC;gBACb,KAAK,EAAE,CAAC;gBACR,UAAU,EAAE,CAAC,OAAO,CAAC;gBACrB,OAAO,EAAE,SAAS;gBAClB,IAAI,EAAE,MAAM;aACb,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE;YAC/C,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,CAAA;QAClC,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,oBAAG,GAAH,UAAI,GAAG;QACL,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;QAChB,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,GAAG,CAAA;IACnD,CAAC;IApDD;QADC,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC;4CACM;IAGzB;QADC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;6CACO;IAGzB;QADC,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC;iDACW;IAI9B;QADC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;6CACO;IAZN,MAAM;QAD1B,OAAO;OACa,MAAM,CAuD1B;IAAD,aAAC;CAvDD,AAuDC,CAvDmC,EAAE,CAAC,SAAS,GAuD/C;kBAvDoB,MAAM","file":"","sourceRoot":"../../../../../assets/Script/network","sourcesContent":["/**\n * @desc: { 上传 } \n * @author: zhengyiqiu \n * @Create Date: 2020-06-30 20:44:24 \n * @Last Modified by: zhengyiqiu\n * @Last Modified time: 2020-07-01 20:06:15\n */\n\nconst { ccclass, property } = cc._decorator\n\n@ccclass\nexport default class Upload extends cc.Component {\n  @property(cc.Label)\n  logLabel: cc.Label = null\n\n  @property(cc.Node)\n  uploadBtn: cc.Node = null\n\n  @property(cc.Label)\n  progressLabel: cc.Label = null\n  \n\n  @property(cc.Node)\n  returnBtn: cc.Node = null\n  \n  start() {\n    this.uploadBtn.on(cc.Node.EventType.TOUCH_START, () => {\n      let task \n      let url = 'https://test-runtime.cocos.com:12345/uploads'\n      let successCb = (data) => {\n        let tempFilePath = data.tempFilePaths[0]\n          task = qg.uploadFile({\n            url,\n            filePath: tempFilePath,\n            name: \"file\",\n            success: () => {\n                this.log(`上传成功`)\n            },\n            fail: (msg) => {\n              this.log(JSON.stringify(msg))\n            },\n        });\n        task.onProgressUpdate((msg) => {\n            this.progressLabel.getComponent(cc.Label).string =  msg['progress'] + '%'\n        })\n      }\n      let failCb = (data) => {\n          this.log(`choose img failed: ${data}`, );\n      }\n      qg.chooseImage({\n        count: 1,\n        sourceType: ['album'],\n        success: successCb,\n        fail: failCb\n      })\n    })\n\n    this.returnBtn.on(cc.Node.EventType.TOUCH_START, () => {\n      cc.director.loadScene('network')\n    })\n  }\n\n  log(msg) {\n    console.log(msg)\n    this.logLabel.getComponent(cc.Label).string = msg\n  }\n}\n"]}